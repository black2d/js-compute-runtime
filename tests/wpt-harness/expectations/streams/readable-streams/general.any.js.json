{
  "ReadableStream can be constructed with no errors": {
    "status": 0
  },
  "ReadableStream can't be constructed with garbage": {
    "status": 0
  },
  "ReadableStream can't be constructed with an invalid type": {
    "status": 1
  },
  "ReadableStream constructor should throw for non-function start arguments": {
    "status": 0
  },
  "ReadableStream constructor will not tolerate initial garbage as cancel argument": {
    "status": 0
  },
  "ReadableStream constructor will not tolerate initial garbage as pull argument": {
    "status": 0
  },
  "ReadableStream start should be called with the proper thisArg": {
    "status": 0
  },
  "ReadableStream start controller parameter should be extensible": {
    "status": 0
  },
  "default ReadableStream getReader() should only accept mode:undefined": {
    "status": 0
  },
  "ReadableStream should be able to call start method within prototype chain of its source": {
    "status": 0
  },
  "ReadableStream start should be able to return a promise": {
    "status": 0
  },
  "ReadableStream start should be able to return a promise and reject it": {
    "status": 0
  },
  "ReadableStream should be able to enqueue different objects.": {
    "status": 0
  },
  "ReadableStream: if pull rejects, it should error the stream": {
    "status": 1
  },
  "ReadableStream: should only call pull once upon starting the stream": {
    "status": 0
  },
  "ReadableStream: should call pull when trying to read from a started, empty stream": {
    "status": 0
  },
  "ReadableStream: should only call pull once on a non-empty stream read from before start fulfills": {
    "status": 0
  },
  "ReadableStream: should only call pull once on a non-empty stream read from after start fulfills": {
    "status": 0
  },
  "ReadableStream: should call pull in reaction to read()ing the last chunk, if not draining": {
    "status": 0
  },
  "ReadableStream: should not call pull() in reaction to read()ing the last chunk, if draining": {
    "status": 0
  },
  "ReadableStream: should not call pull until the previous pull call's promise fulfills": {
    "status": 0
  },
  "ReadableStream: should pull after start, and after every read": {
    "status": 0
  },
  "ReadableStream: should not call pull after start if the stream is now closed": {
    "status": 0
  },
  "ReadableStream: should call pull after enqueueing from inside pull (with no read requests), if strategy allows": {
    "status": 0
  },
  "ReadableStream pull should be able to close a stream.": {
    "status": 0
  },
  "ReadableStream pull should be able to error a stream.": {
    "status": 0
  },
  "ReadableStream pull should be able to error a stream and throw.": {
    "status": 0
  },
  "ReadableStream: enqueue should throw when the stream is readable but draining": {
    "status": 0
  },
  "ReadableStream: enqueue should throw when the stream is closed": {
    "status": 0
  },
  "ReadableStream: should call underlying source methods as methods": {
    "status": 0
  },
  "ReadableStream: desiredSize when closed": {
    "status": 0
  },
  "ReadableStream: desiredSize when errored": {
    "status": 0
  },
  "Subclassing ReadableStream should work": {
    "status": 0
  },
  "ReadableStream strategies: the default strategy should give desiredSize of 1 to start, decreasing by 1 per enqueue": {
    "status": 0
  },
  "ReadableStream strategies: the default strategy should continue giving desiredSize of 1 if the chunks are read immediately": {
    "status": 0
  },
  "ReadableStream integration test: adapting a random push source": {
    "status": 0
  },
  "ReadableStream integration test: adapting a sync pull source": {
    "status": 0
  },
  "ReadableStream integration test: adapting an async pull source": {
    "status": 0
  }
}