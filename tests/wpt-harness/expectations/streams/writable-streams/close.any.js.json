{
  "fulfillment value of writer.close() call must be undefined even if the underlying sink returns a non-undefined value": {
    "status": 0
  },
  "when sink calls error asynchronously while sink close is in-flight, the stream should not become errored": {
    "status": 0
  },
  "when sink calls error synchronously while closing, the stream should not become errored": {
    "status": 0
  },
  "when the sink throws during close, and the close is requested while a write is still in-flight, the stream should become errored during the close": {
    "status": 0
  },
  "releaseLock on a stream with a pending write in which the stream has been errored": {
    "status": 0
  },
  "releaseLock on a stream with a pending close in which controller.error() was called": {
    "status": 0
  },
  "when close is called on a WritableStream in writable state, ready should return a fulfilled promise": {
    "status": 0
  },
  "when close is called on a WritableStream in waiting state, ready promise should be fulfilled": {
    "status": 0
  },
  "when close is called on a WritableStream in waiting state, ready should be fulfilled immediately even if close takes a long time": {
    "status": 0
  },
  "returning a thenable from close() should work": {
    "status": 0
  },
  "releaseLock() should not change the result of sync close()": {
    "status": 0
  },
  "releaseLock() should not change the result of async close()": {
    "status": 0
  },
  "close() should set state to CLOSED even if writer has detached": {
    "status": 0
  },
  "the promise returned by async abort during close should resolve": {
    "status": 0
  },
  "promises must fulfill/reject in the expected order on closure": {
    "status": 0
  },
  "promises must fulfill/reject in the expected order on aborted closure": {
    "status": 0
  },
  "promises must fulfill/reject in the expected order on aborted and errored closure": {
    "status": 0
  },
  "close() should not reject until no sink methods are in flight": {
    "status": 0
  },
  "ready promise should be initialised as fulfilled for a writer on a closed stream": {
    "status": 0
  },
  "close() on a writable stream should work": {
    "status": 0
  },
  "close() on a locked stream should reject": {
    "status": 0
  },
  "close() on an erroring stream should reject": {
    "status": 0
  },
  "close() on an errored stream should reject": {
    "status": 0
  },
  "close() on an closed stream should reject": {
    "status": 0
  },
  "close() on a stream with a pending close should reject": {
    "status": 0
  }
}